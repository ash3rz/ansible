filter {
    ## This filter is meant to clean up any existing 'request' fields, and turn 
    ## them into nested fields 
     if [request] {
         json {
            source => "request"
            target => "request"
         }

         mutate {
             remove_field => ["[request][path-info]"]
         }
         mutate {
             add_field => {"[request][path-info]" => "%{[request][uri]}"}
         }
         ## Extract UUID
         grok {
            keep_empty_captures => true
            match => {"[request][path-info]" => "(?<start>(^/(?:(?<resource>[A-Za-z0-9$.+!*'(){},~:;=#%_-]*)/)+))(?=%{UUID})(%{UUID:uuid})(%{GREEDYDATA:end})?" }
            tag_on_failure => ["extract_uuid_failure"]
         }
         if "extract_uuid_failure" not in [tags] {
             if [end] {
                mutate {
                    replace => {"[request][path-info]" => "%{start}[UUID]%{end}"}
                }
             } else {
                mutate {
                    replace => {"[request][path-info]" => "%{start}[UUID]"}
                }
             }
             mutate {
                 remove_field => ["[request][route-params][%{resource}-id]"]
             }
             mutate {
                 add_field => {"[request][route-params][%{resource}-id]" => "%{uuid}"}
             }
             mutate {
                 remove_field => ["start",
                                  "resource",
                                  "uuid",
                                  "end"]
             }
         } else {
             ## Remove failure tag
             mutate {
                 remove_tag => ["extract_uuid_failure"]
             }
         }


         ## Copy Request ID to dedicated field
         if [request][headers][X-DE-request-id] {
             mutate {
                 add_field => {"[request][id]" => "%{[request][headers][X-DE-request-id]}"}
             }
         }
     }

}

