filter {
     # If there are any responses, it is expected that their bodies can be json encoded.
     if [response] {
         json {
            source => "response"
            target => "response"
         }

         mutate {
             remove_field => ["[response][path-info]"]
         }
         mutate {
             add_field => {"[response][path-info]" => "%{[response][uri]}"}
         }
         ## Extract UUID
         grok {
            keep_empty_captures => true
            match => {"[response][path-info]" => "(?<start>(^/(?:(?<resource>[A-Za-z0-9$.+!*'(){},~:;=#%_-]*)/)+))(?=%{UUID})(%{UUID:uuid})(%{GREEDYDATA:end})?" }
            tag_on_failure => ["extract_uuid_failure"]
         }
         if "extract_uuid_failure" not in [tags] {
             if [end] {
                mutate {
                    replace => {"[response][path-info]" => "%{start}[UUID]%{end}"}
                }
             } else {
                mutate {
                    replace => {"[response][path-info]" => "%{start}[UUID]"}
                }
             }
             mutate {
                 remove_field => ["[response][route-params][%{resource}-id]"]
             }
             mutate {
                 add_field => {"[response][route-params][%{resource}-id]" => "%{uuid}"}
             }
             mutate {
                 remove_field => ["start",
                                  "resource",
                                  "uuid",
                                  "end"]
             }
         } else {
             ## Remove failure tag
             mutate {
                 remove_tag => ["extract_uuid_failure"]
             }
         }

         ## Copy Request ID to dedicated field
         if [response][headers][X-DE-request-id] {
             mutate {
                 add_field => {"[request][id]" => "%{[response][headers][X-DE-request-id]}"}
             }
         }
     }
}

