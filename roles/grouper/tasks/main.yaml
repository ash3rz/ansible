---
- name: ensure that /etc/grouper exists
  sudo: yes
  file: path=/etc/grouper state=directory mode=0755
  tags:
    - config

- name: ensure that /etc/tomcat exists
  sudo: yes
  file: path=/etc/tomcat state=directory mode=0755
  tags:
    - config

- name: ensure that /var/log/grouper exists
  sudo: yes
  file: path=/var/log/grouper state=directory mode=0755
  tags:
    - config

- name: ensure that /etc/nginx exists
  sudo: yes
  file: path=/etc/nginx state=directory mode=0755
  tags:
    - config

- name: generate grouper.properties
  sudo: yes
  template: src=grouper.properties.j2 dest=/etc/grouper/grouper.properties owner=root group=root mode=0644
  tags:
    - config
    - config_grouper

- name: generate grouper-ws.properties
  sudo: yes
  template: src=grouper-ws.properties.j2 dest=/etc/grouper/grouper-ws.properties owner=root group=root mode=0644
  tags:
    - config
    - config_grouper

- name: generate hibernate.properties
  sudo: yes
  template: src=grouper.hibernate.properties.j2 dest=/etc/grouper/hibernate.properties owner=root group=root mode=0644
  tags:
    - config
    - config_grouper

- name: generate loader.properties
  sudo: yes
  template: src=grouper-loader.properties.j2 dest=/etc/grouper/loader.properties owner=root group=root mode=0644
  tags:
    - config
    - config_grouper

- name: generate sources.xml
  sudo: yes
  template: src=sources.xml.j2 dest=/etc/grouper/sources.xml owner=root group=root mode=0644
  tags:
    - config
    - config_grouper

- name: generate subject.properties
  sudo: yes
  template: src=subject.properties.j2 dest=/etc/grouper/subject.properties owner=root group=root mode=0644
  tags:
    - config
    - config_grouper

- name: generate client.properties
  sudo: yes
  template: src=grouper.client.properties.j2 dest=/etc/grouper/client.properties owner=root group=root mode=0644
  tags:
    - config
    - config_grouper

- name: generate server.xml
  sudo: yes
  template: src=server.xml.j2 dest=/etc/tomcat/server.xml owner=root group=root mode=0644
  tags:
    - config
    - config_tomcat

- name: generate setenv.sh
  sudo: yes
  template: src=setenv.sh.j2 dest=/etc/tomcat/setenv.sh owner=root group=root mode=0644
  tags:
    - config
    - config_tomcat

- name: generate tomcat-users.xml
  sudo: yes
  template: src=tomcat-users.xml.j2 dest=/etc/tomcat/tomcat-users.xml owner=root group=root mode=0644
  tags:
    - config
    - config_tomcat

- name: configure nginx
  sudo: yes
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf mode=0644
  tags:
    - config- config_nginx

- name: docker pull iplant-grouper
  sudo: yes
  shell: docker pull {{remote_registry}}/{{grouper.image_name}}:{{docker.tag}}
  tags:
    - docker_pull
    - docker_pull_iplant-grouper

- name: docker pull nginx-ssl
  sudo: yes
  shell: docker pull {{docker.user}}/{{grouper.http_server.image_name}}:{{docker.tag}}
  tags:
    - docker_pull
    - docker-pull_iplant-grouper

- name: place grouper Systemd service file
  sudo: yes
  template: src={{grouper.service_name}} dest=/usr/lib/systemd/system/ group=root owner=root mode=0664
  tags:
    - update_service_files
    - update_service_file_grouper

- name: place grouper-nginx Systemd service file
  template: src={{grouper.http_server.service_name}} dest=/usr/lib/systemd/system/ group=root owner=root mode=0664
  tags:
    - update_service_files
    - update_service_file_grouper
    - update_service_file_grouper-nginx

- name: reload systemd
  shell: systemctl daemon-reload
  tags:
    - update_service_files
    - update_service_file_grouper
    - update_service_file_grouper-nginx

- name: enable grouper services
  service: name={{item}} enabled={{enable_services}}
  with_items:
    - "{{grouper.service_name}}"
    - "{{grouper.http_server.service_name}}"
  tags:
    - restart_services
    - restart_grouper
    - restart_grouper-nginx

- name: restart grouper service
  service: name={{grouper.service_name}} state=restarted
  tags:
    - restart_services
    - restart_grouper

- name: restart grouper-nginx service
  service: name={{grouper.http_server.service_name}} state=restarted
  tags:
    - restart_services
    - restart_grouper-nginx

- name: wait for the Grouper port
  wait_for: port=8080 delay=10

- name: initialize Grouper
  shell: docker run --rm -it -v /etc/grouper:/etc/grouper {{ docker.user }}/{{ grouper.init_image }}:{{ docker.tag }}
