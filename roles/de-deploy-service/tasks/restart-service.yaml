# Performs a basic deployment of a service: pulls it and dependent images like configs and the data container,
# stops and removes existing containers, then starts the service.
---
- name: pull the {{pull_service_name}} image(s)
  shell: "docker-compose -f {{docker_compose_path}} pull {{pull_service_name}}"
  register: docker_pull_v
  changed_when: true
  tags:
    - docker_pull
    - docker_pull_service
  vars:
    pull_service_name: "{{restart_service_name}} {% if has_configs|default(true)   %}config_{{restart_service_name}}{% endif %} {% if has_data_container|default  (false) %}{{data_container_service_name}}_{{restart_service_name}}{% endif %}"

- name: stop the {{stop_service_name}} container
  shell: "docker-compose -f {{docker_compose_path}} stop {{stop_service_name}}"
  register: docker_up_v
  changed_when: docker_up_v.stdout.find('Image is up to date') == -1
  tags:
    - docker_stop
  vars:
    stop_service_name: "{{restart_service_name}}"

- name: remove the {{rm_service_name}} container (s)
  shell: "docker-compose -f {{docker_compose_path}} rm -f -v {{rm_service_name}}"
  register: docker_pull_v
  changed_when: true
  ignore_errors: yes
  tags:
    - docker_rm
    - docker_rm_service
  vars:
    rm_service_name: "{{restart_service_name}} {% if has_configs|default(true)   %}config_{{restart_service_name}}{% endif %} {% if has_data_container|default  (false) %}{{data_container_service_name}}_{{restart_service_name}}{% endif %}"

- name: start {{up_service_name}}
  shell: "docker-compose -f {{docker_compose_path}} up -d {% if force_recreate|default(true) %}--force-recreate{% endif %} {{up_service_name}}"
  register: docker_up_v
  changed_when: docker_up_v.stdout.find('is up to date') == -1
  tags:
    - docker_up
  vars:
    up_service_name: "{{restart_service_name}}"
