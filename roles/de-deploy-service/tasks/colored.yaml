# Determines the current color (blue or green) of a service using consul, then delegates to swap-service.yaml to deploy based on this information.
---

- block:
  - when: available_services is not iterable
    name: verify available_services was provided to check-service
    fail: msg="An iterable available_services must be passed to check-service  .yaml"

  - when: check_service_name not in available_services
    name: verify that {{check_service_name}} exists in the docker-compose file
    fail: msg="{{check_service_name}} is not available on this host"
    vars:
      check_service_name: "{{service_name}}_green"

  - when: check_service_name not in available_services
    name: verify that {{check_service_name}} exists in the docker-compose file
    fail: msg="{{check_service_name}} is not available on this host"
    vars:
      check_service_name: "{{service_name}}_blue"

  - when: has_configs|default(true) and
          check_service_name not in available_services
    name: verify that {{check_service_name}} exists in the docker-compose file
    fail: msg="{{check_service_name}} is not available on this host"
    vars:
      check_service_name: "config_{{service_name}}_green"

  - when: has_configs|default(true) and
          check_service_name not in available_services
    name: verify that {{check_service_name}} exists in the docker-compose file
    fail: msg="{{check_service_name}} is not available on this host"
    vars:
      check_service_name: "config_{{service_name}}_blue"

  - when: has_data_container|default(false) and
          check_service_name not in available_services
    name: verify that {{check_service_name}} exists in the docker-compose file
    fail: msg="{{check_service_name}} is not available on this host"
    vars:
      check_service_name: "{{data_container_service_name}}_{{service_name}}_green"

  - when: has_data_container|default(false) and
          check_service_name not in available_services
    name: verify that {{check_service_name}} exists in the docker-compose file
    fail: msg="{{check_service_name}} is not available on this host"
    vars:
      check_service_name: "{{data_container_service_name}}_{{service_name}}_blue"
  vars:
    available_services: "{{service_list.stdout_lines}}"
  tags:
    - verify

- block:
  - name: update python-consul
    pip: name="python-consul" state="present"
    when: consul_token != ""
  - name: update pyhcl
    pip: name="pyhcl" state="present"
    when: consul_token != ""
  - name: Allocate a consul ACL token
    when: consul_token != ""
    consul_acl:
      mgmt_token: "{{ consul_token }}"
      host: "localhost"
      port: "{{consul_port}}"
      name: "Temporary {{service_name_short}} deployment token (color check)"
      rules:
        - key: ''
          policy: deny
        - key: "{{environment_name}}/{{service_name_short}}/color"
          policy: read
    register: consul_deployment_token
    ignore_errors: True

  - name: Determine color of {{service_name_short}}
    shell: "curl -f 'http://localhost:{{consul_port}}/v1/kv/{{environment_name}}/{{service_name_short}}/color?raw{% if consul_deployment_token and 'token' in consul_deployment_token %}&token={{ consul_deployment_token.token }}{% endif %}' || printf 'green'"
    args:
      warn: no
    register: service_color_check
  - debug: msg="Color of {{service_name}} is {{service_color_check.stdout_lines[0]}}"
  run_once: true
  always:
    - name: "Remove consul ACL token"
      consul_acl:
        mgmt_token: "{{ consul_token }}"
        host: "localhost"
        token: "{{consul_deployment_token.token}}"
        state: absent
      when: consul_deployment_token and 'token' in consul_deployment_token
      ignore_errors: True

- fail: msg="Color is not either known value."
  when: service_color_check.stdout_lines[0] != 'green' and service_color_check.stdout_lines[0] != 'blue'

- include: swap-service.yaml
  vars:
      current_color: "{{ service_color_check.stdout_lines[0] }}"
      other_color: "{% if service_color_check.stdout_lines[0] == 'green' %}blue{% else %}green{% endif %}"
