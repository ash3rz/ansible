# Determines the current color (blue or green) of a service using consul, then delegates to swap-service.yaml to deploy based on this information.
---

- include: check-service.yaml
  vars:
    check_service_name: "{{service_name}}_green"

- include: check-service.yaml
  vars:
    check_service_name: "{{service_name}}_blue"

- include: check-service.yaml
  vars:
    check_service_name: "config_{{service_name}}_green"
  when: has_configs|default(true)

- include: check-service.yaml
  vars:
    check_service_name: "config_{{service_name}}_blue"
  when: has_configs|default(true)

- include: check.yaml
  vars:
    check_service_name: "iplant_data_{{service_name}}_green"
  when: has_iplant_data|default(false)

- include: check.yaml
  vars:
    check_service_name: "iplant_data_{{service_name}}_blue"
  when: has_iplant_data|default(false)

- debug: msg="Determining color of {{service_name}}"

- name: get {{service_name_short}} color
  environment:
    DE_TAG: "{{docker.tag}}"
    DE_ENV: "{{environment_name}}"
    HOSTNAME: "{{inventory_hostname}}"
  shell: "curl -f http://localhost:{{consul_port}}/v1/kv/{{environment_name}}/{{service_name_short}}/color?raw || printf 'green'"
  args:
    warn: no
  register: service_color_check

- debug: msg="Color of {{service_name}} is {{service_color_check.stdout_lines[0]}}"

- include: swap-service.yaml
  vars:
      current_color: "green"
      other_color: "blue"
  when: service_color_check.stdout_lines[0] == 'green'

- include: swap-service.yaml
  vars:
      current_color: "blue"
      other_color: "green"
  when: service_color_check.stdout_lines[0] == 'blue'
